
    WindowHandle = CreateWindowA(_ClassName.data(), _TitleName.data(), WS_OVERLAPPED,
        0, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);
    //WindowHandle = CreateWindowA(_ClassName.data(), 0, WS_OVERLAPPED,
    //    -10, (ScreenY - (ScreenY / 3)), WS_SYSMENU, ScreenY / 3, nullptr, nullptr, hInstance, nullptr);

        
	SetWindowAlpha();


void UEngineWindow::SetWindowPosAndScale(std::string_view _TitleName, FVector2D _Pos, FVector2D _Scale)
{
    RECT Rc = { 0, 0, _Scale.iX(), _Scale.iY() };
    AdjustWindowRect(&Rc, WS_OVERLAPPED, FALSE);

    // 이전의 크기와 달라졌을때만 백버퍼를 새로 만든 것이다.
    if (false == WindowSize.EqualToInt(_Scale) && _TitleName.data() == "EduWindow")
    {
        // 화면의 크기와 전히 동일한 크기여야 한다.
        // 여러번 호출하면 기존에 만들었던 녀석이 Leck이 되므로
        // 화면크기를 조정할 때마다 삭제해줘야 한다.
        if (nullptr != BackBufferImage)
        {
            // 기존 백버퍼는 지워버리고
            delete BackBufferImage;
            BackBufferImage = nullptr;
        }

        BackBufferImage = new UEngineWinImage();
        BackBufferImage->Create(WindowImage, _Scale);

        WindowSize = _Scale;

        SetForegroundWindow(WindowHandle);
        ::SetWindowPos(WindowHandle, nullptr, _Pos.iX() - 10, _Pos.iY(), Rc.right - Rc.left, Rc.bottom - Rc.top, SWP_SHOWWINDOW);

        long style = ::GetWindowLongA(WindowHandle, GWL_STYLE);
        style &= ~WS_CAPTION;
        SetWindowLongA(WindowHandle, GWL_STYLE, style);
    }
    else
    {
        SetForegroundWindow(WindowHandleSub);
        ::SetWindowPos(WindowHandleSub, nullptr, _Pos.iX() - 10, _Pos.iY(), Rc.right - Rc.left, Rc.bottom - Rc.top, SWP_SHOWWINDOW);

        long style = ::GetWindowLongA(WindowHandleSub, GWL_STYLE);
        style &= ~WS_CAPTION;
        SetWindowLongA(WindowHandleSub, GWL_STYLE, style);
    }
}

void UEngineWindow::SetWindowAlpha()
{
    long l = GetWindowLongA(WindowHandle, GWL_EXSTYLE);

    l |= WS_EX_LAYERED;

    SetWindowLongA(WindowHandle, GWL_EXSTYLE, l);

    SetLayeredWindowAttributes(WindowHandle, 0, 50, LWA_ALPHA);
}



    static int ScreenX = GetSystemMetrics(SM_CXSCREEN);
    static int ScreenY = GetSystemMetrics(SM_CYSCREEN);


	void SetWindowPosAndScale(std::string_view _TitleName, FVector2D _Pos, FVector2D _Scale);
    
	inline HWND GetWindowHandle() const
	{
		return WindowHandle;
	}

	inline HWND GetWindowHandleSub() const
	{
		return WindowHandleSub;
	}

	void SetWindowAlpha();



	Core.EngineSubWindow.Open();


	UEngineWindow& GetSubWindow()
	{
		return EngineSubWindow;
	}
    
	HWND WindowHandleSub = nullptr;


  

	UEngineWindow& GetSubWindow()
	{
		return EngineSubWindow;
	}
    
	UEngineWindow EngineSubWindow = UEngineWindow(); // 엔진 서브 윈도우


	UEngineAPICore::GetCore()->GetMainWindow().SetWindowTitle("EduWindow");

	UEngineAPICore::GetCore()->GetMainWindow().SetWindowPosAndScale("EduWindow", { 0, 0 }, { ScreenX, ScreenY });

	UEngineAPICore::GetCore()->GetMainWindow().SetWindowAlpha();

	UEngineAPICore::GetCore()->GetSubWindow().SetWindowTitle("SubWindow");
    
	UEngineAPICore::GetCore()->GetSubWindow().SetWindowPosAndScale("SubWindow", { 0, 3 / ScreenY }, { static_cast<long>(ScreenX), static_cast<long>((ScreenY - (ScreenY / 3))) });