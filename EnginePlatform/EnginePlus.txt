
    WindowHandle = CreateWindowA(_ClassName.data(), _TitleName.data(), WS_OVERLAPPED,
        0, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);
    //WindowHandle = CreateWindowA(_ClassName.data(), 0, WS_OVERLAPPED,
    //    -10, (ScreenY - (ScreenY / 3)), WS_SYSMENU, ScreenY / 3, nullptr, nullptr, hInstance, nullptr);

    

void UEngineWindow::SetWindowAlpha()
{
    HDC hdc;
    PAINTSTRUCT ps;
    RECT rc1 = { 50, 50, 50, 50 };

    switch (WM_PAINT)
    {
    case WM_PAINT:
        hdc = BeginPaint(WindowHandle, &ps);
        Rectangle(hdc, rc1.left, rc1.top, rc1.right, rc1.bottom);
        EndPaint(WindowHandle, &ps);
        break;
    }

    long style = ::GetWindowLongA(WindowHandle, GWL_STYLE);
    style &= ~WS_CAPTION;
    SetWindowLongA(WindowHandle, GWL_STYLE, style);

    long l = GetWindowLongA(WindowHandle, GWL_EXSTYLE);
    l |= WS_EX_LAYERED;
    SetWindowLongA(WindowHandle, GWL_EXSTYLE, l);
    SetLayeredWindowAttributes(WindowHandle, RGB(0, 0 ,0), 50, LWA_COLORKEY);
}



static int ScreenX = GetSystemMetrics(SM_CXSCREEN);
static int ScreenY = GetSystemMetrics(SM_CYSCREEN);

    void SetWindowAlpha();


	{
		BackTopSpriteRenderer = CreateDefaultSubObject<USpriteRenderer>();
		BackTopSpriteRenderer->SetOrder(ERenderOrder::BACKGROUNDTOP);
		BackTopSpriteRenderer->SetSprite("bg001_Col.png");

		FVector2D MapScale = BackTopSpriteRenderer->SetSpriteScale(0.5f);
		BackTopSpriteRenderer->SetComponentLocation({ static_cast <float>((ScreenX) * 0.5), static_cast <float>(-ScreenY * 0.0375) });
	}


	UEngineAPICore::GetCore()->GetMainWindow().SetWindowTitle("EduWindow");
	UEngineAPICore::GetCore()->GetMainWindow().SetWindowPosAndScale({ static_cast < float>(0), (ScreenY - static_cast<float>( ScreenY * 0.34 )) }, { static_cast<float>(ScreenX), static_cast<float>(ScreenY * 0.3) });
	UEngineAPICore::GetCore()->GetMainWindow().SetWindowAlpha();